/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    long long kthLargestLevelSum(TreeNode* root, int k) {
        // Min-heap to keep track of the largest sums
        priority_queue<long, vector<long>, greater<long>> minHeap;

        // Queue for level order traversal (BFS)
        queue<TreeNode*> bfsQueue;
        if (root != nullptr) {
            bfsQueue.push(root); // Start with the root node
        }

        // Perform level order traversal
        while (!bfsQueue.empty()) {
            int currentLevelSize = bfsQueue.size(); // Number of nodes at the current level
            long currentLevelSum = 0; // Sum of values at the current level

            // Iterate over all nodes at the current level
            for (int i = 0; i < currentLevelSize; i++) {
                TreeNode* currentNode = bfsQueue.front(); // Get the front node
                bfsQueue.pop(); // Remove it from the queue
                
                currentLevelSum += currentNode->val; // Add the node's value to the level sum
                
                // Add left child to the queue if it exists
                if (currentNode->left != nullptr) {
                    bfsQueue.push(currentNode->left);
                }
                // Add right child to the queue if it exists
                if (currentNode->right != nullptr) {
                    bfsQueue.push(currentNode->right);
                }
            }
            
            // Add the sum of the current level to the min-heap
            minHeap.push(currentLevelSum);
            // If the heap exceeds size k, remove the smallest sum
            if (minHeap.size() > k) {
                minHeap.pop();
            }
        }

        // If there are fewer than k level sums, return -1
        if (minHeap.size() < k) return -1;
        // Return the smallest sum in the min-heap, which is the kth largest level sum
        return minHeap.top();
    }
};
