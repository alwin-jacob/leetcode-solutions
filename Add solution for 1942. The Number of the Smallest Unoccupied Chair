class Solution {
public:
    // Function to find the smallest chair for the target friend
    int smallestChair(vector<vector<int>>& times, int targetFriend) {
        // Priority queue to manage leaving times and associated chair numbers
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> leavingQueue;

        // Extract the target friend's arrival time
        int targetArrivalTime = times[targetFriend][0];

        // Sort the times based on arrival times
        sort(times.begin(), times.end());

        int nextAvailableChair = 0;  // Track the next available chair number
        set<int> availableChairs; // Set to track chairs that are available

        // Iterate over each friend's time entry
        for (const auto& time : times) {
            int arrivalTime = time[0]; // Friend's arrival time
            int departureTime = time[1]; // Friend's departure time

            // Free up chairs based on current arrival time
            while (!leavingQueue.empty() && leavingQueue.top().first <= arrivalTime) {
                availableChairs.insert(leavingQueue.top().second); // Add chair back to available set
                leavingQueue.pop(); // Remove the chair from the queue
            }

            int assignedChair; // Chair assigned to the current friend
            // Assign chair from available set or increment to the next new chair
            if (!availableChairs.empty()) {
                assignedChair = *availableChairs.begin(); // Get the smallest available chair
                availableChairs.erase(availableChairs.begin()); // Remove from available set
            } else {
                assignedChair = nextAvailableChair++; // Use the next chair
            }

            // Push the current friend's departure time and assigned chair into the queue
            leavingQueue.push({departureTime, assignedChair});

            // Check if this is the target friend
            if (arrivalTime == targetArrivalTime) return assignedChair; // Return the assigned chair
        }

        return 0; // This return will not be reached in valid input scenarios
    }
};
