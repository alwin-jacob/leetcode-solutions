class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        // Check if the tree is empty
        if (root == nullptr) {
            return root;
        }

        // Use a queue for level-order traversal
        queue<TreeNode*> nodeQueue;
        nodeQueue.push(root);
        int parentLevelSum = root->val; // Sum of values from the previous level

        while (!nodeQueue.empty()) {
            int currentLevelSize = nodeQueue.size(); // Number of nodes at the current level
            int currentLevelSum = 0; // Sum of values for the current level

            for (int i = 0; i < currentLevelSize; i++) {
                TreeNode* currentNode = nodeQueue.front(); // Get the front node in the queue
                nodeQueue.pop();

                // Update the current node's value to the cousin sum
                currentNode->val = parentLevelSum - currentNode->val;

                // Calculate the sum of sibling nodes
                int siblingSum = 0;
                if (currentNode->left != nullptr) {
                    siblingSum += currentNode->left->val;
                }
                if (currentNode->right != nullptr) {
                    siblingSum += currentNode->right->val;
                }

                // Update the left child if it exists
                if (currentNode->left != nullptr) {
                    currentLevelSum += currentNode->left->val; // Accumulate current level sum
                    currentNode->left->val = siblingSum; // Update left child's value
                    nodeQueue.push(currentNode->left); // Add left child to the queue
                }

                // Update the right child if it exists
                if (currentNode->right != nullptr) {
                    currentLevelSum += currentNode->right->val; // Accumulate current level sum
                    currentNode->right->val = siblingSum; // Update right child's value
                    nodeQueue.push(currentNode->right); // Add right child to the queue
                }
            }

            // Update parent level sum for the next iteration
            parentLevelSum = currentLevelSum; 
        }
        return root; // Return the modified tree
    }
};
