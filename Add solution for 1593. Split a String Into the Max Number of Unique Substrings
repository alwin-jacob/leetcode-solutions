class Solution {
public:
    int maxUniqueSplit(string inputString) {
        unordered_set<string> uniqueSubstrings;  // Set to keep track of unique substrings
        int maximumCount = 0;  // Variable to store the maximum number of unique substrings
        backtrack(inputString, 0, uniqueSubstrings, 0, maximumCount);
        return maximumCount;
    }

private:
    void backtrack(const string& inputString, int startIndex, unordered_set<string>& uniqueSubstrings,
                   int currentCount, int& maximumCount) {
        // Prune: If the current count plus remaining characters can't exceed maxCount, return
        if (currentCount + (inputString.size() - startIndex) <= maximumCount) return;

        // Base case: If we reach the end of the string, update maximumCount
        if (startIndex == inputString.size()) {
            maximumCount = max(maximumCount, currentCount);
            return;
        }

        // Try every possible substring starting from 'startIndex'
        for (int endIndex = startIndex + 1; endIndex <= inputString.size(); ++endIndex) {
            string substring = inputString.substr(startIndex, endIndex - startIndex);
            // If the substring is unique
            if (uniqueSubstrings.find(substring) == uniqueSubstrings.end()) {
                // Add the substring to the uniqueSubstrings set
                uniqueSubstrings.insert(substring);
                // Recursively count unique substrings from the next position
                backtrack(inputString, endIndex, uniqueSubstrings, currentCount + 1, maximumCount);
                // Backtrack: remove the substring from the uniqueSubstrings set
                uniqueSubstrings.erase(substring);
            }
        }
    }
};
