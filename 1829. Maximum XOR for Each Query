class Solution {
public:
    vector<int> getMaximumXor(vector<int>& nums, int maximumBit) {
        int cumulativeXor = 0;  // Variable to store the cumulative XOR of all elements in nums.
        
        // Calculate the cumulative XOR of all elements.
        for (int i = 0; i < nums.size(); i++) {
            cumulativeXor = cumulativeXor ^ nums[i];
        }
        
        vector<int> result(nums.size());  // Vector to store the results.
        
        // Create a mask for the maximum possible value based on maximumBit.
        int mask = (1 << maximumBit) - 1;  // This mask helps to get the maximum XOR values.

        // Calculate the maximum XOR for each element in reverse order.
        for (int i = 0; i < nums.size(); i++) {
            result[i] = cumulativeXor ^ mask;  // Calculate the XOR with the mask for maximum value.
            // Update the cumulativeXor by removing the last element (from the end of the nums).
            cumulativeXor = cumulativeXor ^ nums[nums.size() - 1 - i];
        }

        return result;  // Return the vector containing the maximum XOR values.
    }
};
